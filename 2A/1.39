
;Recursive
(define (lambert n d k)
  (define (iter a b)
    (if(= a b)
      (/ (n a) (d a))  
      (/ (n a) (- (d a) (iter (+ a 1) b))) ))
  (iter 1 k))

(define (tan-cf x k) 
  (lambert (lambda (i) 
            (if(= i 1)
              x 
              (square x)))
    (lambda (i) (- (* 2 i) 1) ) 
    k))

(tan-cf 1 12)
;(cont-frac-iterative (lambda (i) 1.0)
;  (lambda (i) 1.0)
;  100)

;(cont-frac (lambda (i) 1.0)
;  (lambda (i) 1.0)
;  12)